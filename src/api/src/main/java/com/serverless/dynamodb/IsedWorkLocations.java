package com.serverless.dynamodb;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PLACEHOLDER_ISEDWORKLOCATIONS_TABLE_NAME")
public class IsedWorkLocations {

    // get the table name from env. var. set in serverless.yml
    private static final String ISEDWORKLOCATIONS_TABLE_NAME = System.getenv("ISEDWORKLOCATIONS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger logger = LogManager.getLogger(this.getClass());

    private String pk;
    private String addressEn;
    private String addressFr;
    private String city;
    private String province;

    @DynamoDBHashKey(attributeName = "pk")
    @DynamoDBAutoGeneratedKey
    public String getPk() {
        return this.pk;
    }
    public void setPk(String pk) {
        this.pk = pk;
    }

    @DynamoDBAttribute(attributeName = "address-en")
    public String getAddressEn() {
        return addressEn;
    }

    public void setAddressEn(String addressEn) {
        this.addressEn = addressEn;
    }
    @DynamoDBAttribute(attributeName = "address-fr")
    public String getAddressFr() {
        return addressFr;
    }

    public void setAddressFr(String addressFr) {
        this.addressFr = addressFr;
    }
    @DynamoDBAttribute(attributeName = "city")
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
    @DynamoDBAttribute(attributeName = "province")
    public String getProvince() {
        return province;
    }

    public void setProvince(String province) {
        this.province = province;
    }

    public IsedWorkLocations() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(ISEDWORKLOCATIONS_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(ISEDWORKLOCATIONS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<IsedWorkLocations> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<IsedWorkLocations> results = this.mapper.scan(IsedWorkLocations.class, scanExp);
      for (IsedWorkLocations p : results) {
        logger.info("IsedWorkLocations - list(): " + p.toString());
      }
      return results;
    }

    public IsedWorkLocations get(String id) throws IOException {
        IsedWorkLocations isedWorkLocations = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<IsedWorkLocations> queryExp = new DynamoDBQueryExpression<IsedWorkLocations>()
            .withKeyConditionExpression("pk = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<IsedWorkLocations> result = this.mapper.query(IsedWorkLocations.class, queryExp);
        if (result.size() > 0) {
          isedWorkLocations = result.get(0);
          logger.info("IsedWorkLocations - get(): isedWorkLocations - " + isedWorkLocations.toString());
        } else {
          logger.info("IsedWorkLocations - get(): isedWorkLocations - Not Found.");
        }
        return isedWorkLocations;
    }

    public void save(IsedWorkLocations isedWorkLocations) throws IOException {
        logger.info("IsedWorkLocations - save(): " + isedWorkLocations.toString());
        this.mapper.save(isedWorkLocations);
    }

    public Boolean delete(String id) throws IOException {
        IsedWorkLocations isedWorkLocations = null;

        // get isedWorkLocations if exists
        isedWorkLocations = get(id);
        if (isedWorkLocations != null) {
          logger.info("IsedWorkLocations - delete(): " + isedWorkLocations.toString());
          this.mapper.delete(isedWorkLocations);
        } else {
          logger.info("IsedWorkLocations - delete(): isedWorkLocations - does not exist.");
          return false;
        }
        return true;
    }

}
